在目錄底下建立 git目錄

	$ cd project
	$ echo "# fake_json_server" >> README.md
	$ git init
	$ git add README.md
	$ git commit -m "first commit"
	$ git remote add origin https://github.com/gtu001/fake_json_server.git
	$ git push -u origin master

--------------------------------------------------------------------------
建立遠端別名

	git remote add <remote_tag> <remote_url>

--------------------------------------------------------------------------
取得所有遠端資訊(包含所有遠端branch)

	git fetch --all


--------------------------------------------------------------------------
第一次commit要做

	git init
	git config user.name "someone"
	git config user.email "someone@someplace.com"

--------------------------------------------------------------------------
與head差異

	git diff HEAD


--------------------------------------------------------------------------
取得異動狀態

	git status
	

顯示完整路徑 (PS : for linux 做 merge處理)

	git status | awk -v P="$(pwd)" '{ if ($1 != "modified:") {print P "/" $1} } '
	
只印要merge的檔案 (PS : for linux 做 merge處理)

	git status -s | grep ^UU | awk -v P="$(pwd)" '{print P "/" $2}'
	

--------------------------------------------------------------------------
改變檔案狀態

	git add *
	git reset 

--------------------------------------------------------------------------
將檔案回覆成未改過狀態

	git checkout HEAD GTU/src/gtu/_work/ui/FastDBQueryUI_CrudDlgUI.java
	or
	git checkout <commit_id>  <path>/<file>
	or
	
	
--------------------------------------------------------------------------
衝突速解
	# git版本大於1.6.1
	git checkout --ours <file>
	git checkout --theirs <file>

	# git版本小於1.6.1
	同theirs
		git reset -- <file>
		git checkout MERGE_HEAD -- <file>

	同ours:
		git reset -- <file>
		git checkout ORIG_HEAD -- <file>
	
	

--------------------------------------------------------------------------
交付

	git commit -m "some init msg"


--------------------------------------------------------------------------
## 互動stage change ##

	git add -i

選擇->  2: update 4: add untracked
按數字選檔案
按兩下回車鍵再按Enter回覆上個狀態

	git status 綠色是stage changed


--------------------------------------------------------------------------
重設到某版

	git reset <commit id>


--------------------------------------------------------------------------
拉最新版 

	git pull [--rebase]


--------------------------------------------------------------------------
儲存狀態
	git stash
刪除儲存
	git stash drop
彈出
	git stash pop


--------------------------------------------------------------------------
看log

	git log  --name-only           <---只有檔名
	git log  --name-status         <---次推薦
	git log  --stat                <---推薦

--------------------------------------------------------------------------
merge 處理

	上半部為   <<<遠端內容
	等號下半為 >>>本地內容
	若完全以遠端版本     --> git reset HEAD <file>
	編輯完後要用現在版本 --> git add <file>

--------------------------------------------------------------------------
以下為branch
--------------------------------------------------------------------------
查看目前branch

	git branch

--------------------------------------------------------------------------
查看目前所有branch
	
	git branch -a

	會顯示以下
		* master   <feature_branch>    <--- 綠色為本地當前
		  test_branch 				 	<-- 白色也是本地 branch
		  remotes/origin/<feature_branch>  <---紅色都是遠端
		  remotes/origin/master <---紅色都是遠端

--------------------------------------------------------------------------
切換branch

	git checkout <本地branch>

--------------------------------------------------------------------------
從遠端clone建一條新的branch
	
	git checkout -b <本地branch名>  <遠端branch>
	
	Ps : 若<遠端branch> 沒填, 預設為當前遠端branch建一條新的

--------------------------------------------------------------------------
push 到某  branch

	git push origin <遠端branch名>
	Ex : 
		如果branch叫做 : remotes/origin/test_branch
		指令為 : git push origin test_branch

--------------------------------------------------------------------------

看git config設定
	
	git config --list

設定某個值
	
	git config --global user.name "Troy"

看某個設定值

	git config --global user.name

--------------------------------------------------------------------------------------------------------------------------
revert 版本

	git rebase -i <版本號>

	編輯
		開頭 pick 使用此版
		開頭 squash 不使用此版
		
	中間有衝突繼續
		git rebase --continue
	放棄
		git rebase --abort

--------------------------------------------------------------------------------------------------------------------------
取得過去版本的某檔案

	$ git show <REVISION>:path/to/file
	
取得不含當前三版的內容 (1=>最新板)

	$ git show HEAD~4:src/main.c
	
--------------------------------------------------------------------------------------------------------------------------

修改最後一次註解

	$ git commit --amend -m "Welcome To Facebook"

--------------------------------------------------------------------------------------------------------------------
修改多次註解

	$ git rebase -i <版號[不含]>

	要改的前面打 reword 儲存離開

	由最早的開始編輯


--------------------------------------------------------------------------------------------------------------------
拉遠端code 

	git pull origin develop


--------------------------------------------------------------------------------------------------------------------
查詢遠端別名
	
	git remote -v


--------------------------------------------------------------------------------------------------------------------
切換本地branch

	git checkout develop

--------------------------------------------------------------------------------------------------------------------
推本地到遠端

	git push -u -f origin 20190308-addPagination
	-u 第一次push遠端要加
	-f 強制

--------------------------------------------------------------------------------------------------------------------
刪除本地branch

	git branch -D  20190312_addPagination_2

--------------------------------------------------------------------------------------------------------------------
merge到主線

	1)先commit你的線 假設叫  --> QRCodeTest001
	2)切到主線 pull到最新  假設主線叫做 master
	3)切到主線 master輸入
		git merge QRCodeTest001 master
	5)完成後會停在master本地端, 會自動產生一版commit 記得再push到master遠端

--------------------------------------------------------------------------------------------------------------------
git 看檔案歷史紀錄

	gitk <file>

--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
