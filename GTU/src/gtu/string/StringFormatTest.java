package gtu.string;

public class StringFormatTest {

    public static void main(String[] args) {
        // '-' 在最小寬度內左對齊，不可以與「用0填充」同時使用
        // '#' 只適用於8進制和16進制，8進制時在結果前面增加一個0，16進制時在結果前面增加0x
        // '+' 帶有正負號
        // ' ' 正值前加空格，負值前加負號（一般情況下只適用於10進制，若對像為BigInteger才可以用於8進制和16進制）
        // '0' 結果將用零來填充
        // ',' 只適用於10進制，每3位數字之間用「，」分隔(表示數值應該要使用地區文化群組字元)
        // '(' 若參數是負數，則結果中不添加負號而是用圓括號把數字括起來（同『+』具有同樣的限制）

        System.out.println(String.format("%1$,09d", -3123));
        System.out.println(String.format("%1$9d", -31));
        System.out.println(String.format("%1$-9d", -31));
        System.out.println(String.format("%1$(9d", -31));
        System.out.println(String.format("%1$#9x", 5689));
        
        // d-十進制 o-八進制 x或X-十六進制
        // 需要特別注意的一點是：大部分標識字符可以同時使用。
        
        // %d 十進位整數
        // %e 十進位浮點數,以指數表示
        // %f 十進位浮點數,不以指數表示
        // %g 十進位浮點數,不超過六位有效數字
        // %h 格式化成值得hashcode以十六進位方式表示
        // %n 換行
        // %o 格式化成八進為整數
        // %s 格式化為字串
        // %t 格式化為日期時間
        // %x 格式化為十六進位整數
        System.out.println(String.format("balance:%.2f", 123f));//"."表示要有兩位精確度
        System.out.println(String.format("balance:%10.2f", 123f));
        System.out.println(String.format("balance:%010.2f", 123f));
        System.out.println(String.format("balance:%+,.2f", 12345f));

        // 6.對日期類型進行格式化：
        // 以下日期和時間轉換的後綴字符是為 't' 和 'T' 轉換定義的。這些類型相似於但不完全等同於那些由 GNU date 和 POSIX
        // strftime(3c) 定義的類型。提供其他轉換類型是為了訪問特定於 Java 的功能（如將 'L' 用作秒中的毫秒）。
        // --------------------------------------------
        // 以下轉換字符用來格式化時間：
        // 'H' 24 小時制的小時，被格式化為必要時帶前導零的兩位數，即 00 - 23。
        // 'I' 12 小時制的小時，被格式化為必要時帶前導零的兩位數，即 01 - 12。
        // 'k' 24 小時制的小時，即 0 - 23。
        // 'l' 12 小時制的小時，即 1 - 12。
        // 'M' 小時中的分鐘，被格式化為必要時帶前導零的兩位數，即 00 - 59。
        // 'S' 分鐘中的秒，被格式化為必要時帶前導零的兩位數，即 00 - 60 （"60" 是支持閏秒所需的一個特殊值）。
        // 'L' 秒中的毫秒，被格式化為必要時帶前導零的三位數，即 000 - 999。
        // 'N' 秒中的毫微秒，被格式化為必要時帶前導零的九位數，即 000000000 - 999999999。
        // 'p' 特定於語言環境的 上午或下午 標記以小寫形式表示，例如 "am" 或 "pm"。使用轉換前綴 'T'
        // 可以強行將此輸出轉換為大寫形式。
        // 'z' 相對於 GMT 的 RFC 822 格式的數字時區偏移量，例如 -0800。
        // 'Z' 表示時區縮寫形式的字符串。Formatter 的語言環境將取代參數的語言環境（如果有）。
        // 's' 自協調世界時 (UTC) 1970 年 1 月 1 日 00:00:00 至現在所經過的秒數，即
        // Long.MIN_VALUE/1000 與 Long.MAX_VALUE/1000 之間的差值。
        // 'Q' 自協調世界時 (UTC) 1970 年 1 月 1 日 00:00:00 至現在所經過的毫秒數，即 Long.MIN_VALUE
        // 與 Long.MAX_VALUE 之間的差值。
        // --------------------------------------------
        // 以下轉換字符用來格式化日期：
        // 'B' 特定於語言環境的月份全稱，例如 "January" 和 "February"。
        // 'b' 特定於語言環境的月份簡稱，例如 "Jan" 和 "Feb"。
        // 'h' 與 'b' 相同。
        // 'A' 特定於語言環境的星期幾全稱，例如 "Sunday" 和 "Monday"
        // 'a' 特定於語言環境的星期幾簡稱，例如 "Sun" 和 "Mon"
        // 'C' 除以 100 的四位數表示的年份，被格式化為必要時帶前導零的兩位數，即 00 - 99
        // 'Y' 年份，被格式化為必要時帶前導零的四位數（至少），例如，0092 等於格裡高利歷的 92 CE。
        // 'y' 年份的最後兩位數，被格式化為必要時帶前導零的兩位數，即 00 - 99。
        // 'j' 一年中的天數，被格式化為必要時帶前導零的三位數，例如，對於格裡高利歷是 001 - 366。
        // 'm' 月份，被格式化為必要時帶前導零的兩位數，即 01 - 13。
        // 'd' 一個月中的天數，被格式化為必要時帶前導零兩位數，即 01 - 31
        // 'e' 一個月中的天數，被格式化為兩位數，即 1 - 31。
        // --------------------------------------------
        // 以下轉換字符用於格式化常見的日期/時間組合。
        // 'R' 24 小時制的時間，被格式化為 "%tH:%tM"
        // 'T' 24 小時制的時間，被格式化為 "%tH:%tM:%tS"。
        // 'r' 12 小時制的時間，被格式化為 "%tI:%tM:%tS %Tp"。上午或下午標記 ('%Tp') 的位置可能與語言環境有關。
        // 'D' 日期，被格式化為 "%tm/%td/%ty"。
        // 'F' ISO 8601 格式的完整日期，被格式化為 "%tY-%tm-%td"。
        // 'c' 日期和時間，被格式化為 "%ta %tb %td %tT %tZ %tY"，例如 "Sun Jul 20 16:17:00 EDT 1969"。
        System.out.println(String.format("%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS", System.currentTimeMillis()));
        System.out.println(String.format("%tY-%<tm-%<td %<tH:%<tM:%<tS", System.currentTimeMillis()));//"<"使用前一個參數
    }
}
