buildscript {
	ext {
		springBootVersion = '2.0.3.RELEASE'
	}
	repositories {
		mavenCentral()
    	jcenter()
    	maven {
	        url 'https://repo.spring.io/libs-release' // for spring-data
	    }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('se.transmode.gradle:gradle-docker:1.2')//for docker image
        classpath "io.spring.gradle:dependency-management-plugin:0.4.0.RELEASE" // for spring-data
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'docker'//for docker image


group = 'com.gtu.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

bootJar {
    baseName = 'GtuSpringBoot'
    version =  '0.1.0'
    classifier = 'boot'
    excludeDevtools = false
    mainClassName = 'com.gtu.example.Application'
}

springBoot {
	mainClassName = 'com.gtu.example.Application'
}

jar {
	baseName = "GtuSpringBoot"
	enabled = true
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest { attributes 'Main-Class': 'com.gtu.example.Application' }
}

task copyJar(type: Copy) {
    dependsOn   'jar'
    from        "build/libs/GtuSpringBoot-${project.version}.jar"
    into        'build/docker'
    rename { String fileName ->
        fileName.replace("-${project.version}", "")
    }
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {
	manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',  
        	'Implementation-Version': version,
        	'Main-Class': 'com.gtu.example.Application'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task buildDocker(type: Docker) {
	baseImage = 'develar/java:latest'
	push = project.hasProperty('push')
	tag = 'gtu001/gtu001_spring_boot_image'
	addFile {
	    from bootJar //jar
	    rename {'app_1.jar'}
	}
	entryPoint(['java', '-Djava.security.egd=file:/dev/./urandom', '-jar', '/app_1.jar'])
	// exposePort(8080)
}

buildDocker.dependsOn(build)

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'https://repo.spring.io/libs-release' // for spring-data
    }
}

configurations {
	providedRuntime
}

dependencyManagement {
	imports {
		mavenBom 'org.springframework.data:spring-data-releasetrain:Kay-SR8' // for spring-data
	}
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter')
	//compile('org.springframework.boot:spring-boot-maven-plugin')//加了會錯啊災
	//compile("org.springframework.boot:spring-boot-dependencies")//加了會錯啊災
	compile("org.springframework.boot:spring-boot-starter-web")
	compile("org.springframework.boot:spring-boot-devtools")
 	compile("org.springframework.boot:spring-boot-starter-security")
 	
 	// spring-mvc ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile group: 'net.sf.json-lib', name: 'json-lib', version: '2.4', classifier: 'jdk15'
    // spring-mvc ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑
	
	testCompile('org.springframework.boot:spring-boot-starter-test')
	
	// docker-image ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
	compile("se.transmode.gradle:gradle-docker:1.2") 
	// docker-image ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑
	
	//compileOnly('javax.servlet:servlet-api:2.5')
	//provided group: 'javax.servlet', name: 'servlet-api', version: '2.5'
	
	// rabbitMq ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
	compile("ch.qos.logback:logback-classic")
	compile 'org.slf4j:slf4j-api'
	compile("org.springframework.amqp:spring-rabbit")
	// rabbitMq ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑
	
	// spring-data ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
	//official usage
	compile 'org.springframework.data:spring-data-jpa'
    // compile 'org.springframework.data:spring-data-rest' 找不到
    compile 'org.springframework.boot:spring-boot-starter-data-rest'
    compile 'org.springframework.data:spring-data-rest-core'
    //actual usage
	compile 'org.springframework.boot:spring-boot-starter-test'
	compile 'org.springframework.boot:spring-boot-starter-data-jpa'
	// for mongoDB
	// compile 'org.springframework.data:spring-data-mongodb'
	// for SqlDB
	compile files('D:/my_tool/simple_dao_gen/derbyclient.jar')
	compile files('D:/my_tool/simple_dao_gen/postgresql-42.2.3.jar')
    // spring-data ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑
    
    // gtu-custom ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
	compile ('org.reflections:reflections:0.9.11')
    // gtu-custom ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑
    
}

